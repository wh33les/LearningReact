{"version":3,"file":"static/css/main.a62dc615.css","mappings":"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","sources":["variables.css","global.css","ttt1app/app1styles.css","ttt2app/app2styles.css","c4app/c4appstyles.css"],"sourcesContent":["/* CSS Custom Properties for React Games Application */\r\n:root {\r\n    /* Color System */\r\n    --primary-bg: #19181a;\r\n    --secondary-bg: rgb(35, 39, 47);\r\n    --accent-color: rgb(88, 196, 220);\r\n    --hover-bg: #19181a;\r\n\r\n    /* Typography */\r\n    --font-family: Optimistic Display, -apple-system, ui-sans-serif, system-ui, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;\r\n}","/**\r\n * GLOBAL STYLES FOR REACT GAMES APPLICATION\r\n * \r\n * This file contains application-wide styles that apply to all components.\r\n * It establishes the foundational design system, typography, and layout patterns\r\n * used throughout the React Games application.\r\n * \r\n * Architecture:\r\n * - Imports CSS custom properties from variables.css\r\n * - Sets global defaults and resets\r\n * - Defines reusable utility classes\r\n * - Establishes consistent typography hierarchy\r\n * - Provides layout containers and helpers\r\n * \r\n * CSS concepts demonstrated:\r\n * - CSS imports and modular architecture\r\n * - Global styles and CSS reset techniques\r\n * - Typography hierarchy and vertical rhythm\r\n * - CSS counters for custom list styling\r\n * - Flexbox layout patterns\r\n * - CSS pseudo-elements and pseudo-classes\r\n * - Responsive design foundations\r\n */\r\n\r\n/* ===== CSS IMPORTS ===== */\r\n/**\r\n * Import CSS custom properties (variables)\r\n * \r\n * This must be the first rule to ensure variables are available\r\n * for use throughout the rest of the stylesheet.\r\n */\r\n@import './variables.css';\r\n\r\n/* ===== GLOBAL RESET AND BASE STYLES ===== */\r\n\r\n/**\r\n * UNIVERSAL BOX-SIZING (COMMENTED OUT)\r\n * \r\n * This rule would apply border-box sizing to all elements.\r\n * Currently commented out but represents a common CSS reset technique.\r\n * \r\n * When enabled, it makes width/height calculations more intuitive:\r\n * - width includes padding and border\r\n * - easier responsive design\r\n * - more predictable layouts\r\n */\r\n/** {\r\n  box-sizing: border-box;\r\n}*/\r\n\r\n/**\r\n * BODY ELEMENT - Foundation styles\r\n * \r\n * Sets the basic appearance and typography for the entire application.\r\n * All other elements inherit from these base styles.\r\n */\r\nbody {\r\n  /* BACKGROUND */\r\n  background-color: var(--primary-bg);\r\n  /* Dark background from design system */\r\n\r\n  /* TYPOGRAPHY */\r\n  font-family: var(--font-family);\r\n  /* System font stack from variables */\r\n  font-weight: 400;\r\n  /* Normal font weight (not bold) */\r\n\r\n  /* VISUAL EFFECTS */\r\n  opacity: 0.9;\r\n  /* Slight transparency for softer appearance */\r\n\r\n  /* RESET DEFAULT MARGINS */\r\n  /* Note: margin reset could be added here for more consistent cross-browser appearance */\r\n\r\n  /* DESIGN RATIONALE */\r\n  /* Dark background reduces eye strain in low-light conditions */\r\n  /* System fonts provide optimal performance and native appearance */\r\n  /* Slight opacity creates a softer, more sophisticated look */\r\n}\r\n\r\n/* ===== TYPOGRAPHY HIERARCHY ===== */\r\n\r\n/**\r\n * HEADING STYLES (H1, H2, H3, H4)\r\n * \r\n * Establishes consistent typography hierarchy throughout the application.\r\n * All headings share the same font family and color for visual consistency.\r\n */\r\nh1,\r\nh2,\r\nh3,\r\nh4 {\r\n  font-family: var(--font-family);\r\n  /* Consistent with body font */\r\n  color: var(--accent-color);\r\n  /* Bright color for emphasis and hierarchy */\r\n\r\n  /* DESIGN NOTES */\r\n  /* Bright accent color makes headings stand out against dark background */\r\n  /* Consistent font family maintains visual coherence */\r\n  /* Could be extended with font-size scale and line-height ratios */\r\n}\r\n\r\n/* ===== VISUAL ELEMENTS ===== */\r\n\r\n/**\r\n * HORIZONTAL RULE STYLING\r\n * \r\n * Customizes the appearance of <hr> elements to match the design system.\r\n */\r\nhr {\r\n  border-color: var(--accent-color);\r\n  /* Matches heading color for consistency */\r\n\r\n  /* USAGE */\r\n  /* Provides visual section breaks that integrate with the design system */\r\n  /* Maintains consistent accent color throughout the interface */\r\n}\r\n\r\n/* ===== LINK STYLES ===== */\r\n\r\n/**\r\n * UNVISITED LINK STYLES\r\n * \r\n * Styles for links that haven't been visited yet.\r\n * Uses a purple-blue color that provides good contrast.\r\n */\r\n:link {\r\n  text-decoration: none;\r\n  /* Remove default underline */\r\n  color: #4d5aa0;\r\n  /* Purple-blue color for unvisited links */\r\n\r\n  /* COLOR CHOICE */\r\n  /* Purple-blue suggests clickability while differentiating from accent color */\r\n  /* Sufficient contrast against dark background for accessibility */\r\n}\r\n\r\n/**\r\n * VISITED LINK STYLES\r\n * \r\n * Styles for links that have been previously visited.\r\n * Uses a different color to indicate visited state.\r\n */\r\n:visited {\r\n  text-decoration: none;\r\n  /* Consistent with unvisited links */\r\n  color: #644451;\r\n  /* Muted purple-brown for visited state */\r\n\r\n  /* DESIGN RATIONALE */\r\n  /* Different color helps users track their navigation history */\r\n  /* Muted tone indicates \"already seen\" content */\r\n}\r\n\r\n/**\r\n * LINK HOVER EFFECTS\r\n * \r\n * Interactive feedback when users hover over links.\r\n * Provides clear indication of clickable elements.\r\n */\r\na:hover {\r\n  text-decoration: underline;\r\n  /* Add underline on hover for clarity */\r\n  color: blue;\r\n  /* Classic blue color for hover state */\r\n\r\n  /* USER EXPERIENCE */\r\n  /* Underline appears on hover to confirm link functionality */\r\n  /* Blue color is universally recognized as a link indicator */\r\n}\r\n\r\n/* ===== TYPOGRAPHY UTILITIES ===== */\r\n\r\n/**\r\n * CODE ELEMENT STYLING\r\n * \r\n * Styles for inline code elements to make them visually distinct.\r\n */\r\ncode {\r\n  font-size: 1.2em;\r\n  /* Slightly larger than surrounding text */\r\n\r\n  /* ENHANCEMENT OPPORTUNITIES */\r\n  /* Could add background color, padding, and monospace font */\r\n  /* Example: background: var(--secondary-bg); padding: 2px 4px; */\r\n}\r\n\r\n/* ===== LIST STYLING ===== */\r\n\r\n/**\r\n * UNORDERED LIST STYLES\r\n * \r\n * Customizes the default appearance of bulleted lists.\r\n */\r\nul {\r\n  padding-inline-start: 18px;\r\n  /* Reduced indentation for tighter layout */\r\n\r\n  /* MODERN CSS PROPERTY */\r\n  /* padding-inline-start is a logical property that respects text direction */\r\n  /* Works better than padding-left for international applications */\r\n}\r\n\r\n/**\r\n * LIST ITEM SPACING\r\n * \r\n * Controls the vertical spacing between list items for better readability.\r\n */\r\nul li {\r\n  margin-top: -12px;\r\n  /* Negative margin to tighten default spacing */\r\n  margin-bottom: 18px;\r\n  /* Generous bottom margin for readability */\r\n\r\n  /* VERTICAL RHYTHM */\r\n  /* Creates consistent spacing that enhances text readability */\r\n  /* Balance between too cramped and too spread out */\r\n}\r\n\r\n/* ===== LAYOUT CONTAINERS ===== */\r\n\r\n/**\r\n * MAIN CONTENT CONTAINER\r\n * \r\n * Primary container for game content with dark theme styling.\r\n * Provides consistent width, centering, and visual styling.\r\n */\r\n.bigdiv {\r\n  /* APPEARANCE */\r\n  background-color: var(--secondary-bg);\r\n  /* Elevated surface color */\r\n  color: var(--accent-color);\r\n  /* Bright text for contrast */\r\n\r\n  /* LAYOUT */\r\n  width: 800px;\r\n  /* Fixed width for consistent layout */\r\n  margin: auto;\r\n  /* Center horizontally */\r\n\r\n  /* SPACING */\r\n  padding: 18px;\r\n  /* Internal spacing for content */\r\n\r\n  /* VISUAL EFFECTS */\r\n  opacity: 1.0;\r\n  /* Full opacity (overrides body opacity) */\r\n  overflow: hidden;\r\n  /* Contain child elements */\r\n\r\n  /* DEBUG BORDER (COMMENTED OUT) */\r\n  /*border:2px solid #BADA55*/\r\n  /* \"Bad ass\" green border for debugging */\r\n\r\n  /* DESIGN NOTES */\r\n  /* Acts as a \"card\" or elevated surface in the dark theme */\r\n  /* Fixed width provides consistent layout across different screen sizes */\r\n  /* Could be enhanced with border-radius and box-shadow */\r\n}\r\n\r\n/* ===== UTILITY CLASSES ===== */\r\n\r\n/**\r\n * FLEX CONTAINER FOR GAMES\r\n * \r\n * Utility class for centering game components horizontally.\r\n */\r\n.jsapp {\r\n  display: flex;\r\n  /* Enable flexbox layout */\r\n  justify-content: center;\r\n  /* Center content horizontally */\r\n  width: auto;\r\n  /* Allow natural width sizing */\r\n\r\n  /* USAGE */\r\n  /* Applied to containers that need to center their game content */\r\n  /* Provides consistent centering across different game components */\r\n}\r\n\r\n/* ===== CUSTOM LIST STYLING ===== */\r\n\r\n/**\r\n * CHECKLIST COMPONENT STYLES\r\n * \r\n * Creates a custom numbered list with checkmark functionality.\r\n * Demonstrates advanced CSS techniques with counters and pseudo-elements.\r\n */\r\n\r\n/**\r\n * .checklist - Base checklist container\r\n * \r\n * Removes default list styling and sets up custom numbering system.\r\n */\r\n.checklist {\r\n  list-style: none;\r\n  /* Remove default bullets/numbers */\r\n  counter-reset: item;\r\n  /* Initialize CSS counter named \"item\" */\r\n  padding: 0;\r\n  /* Remove default list padding */\r\n\r\n  /* CSS COUNTERS */\r\n  /* counter-reset initializes a counting mechanism */\r\n  /* Each list item will increment this counter */\r\n}\r\n\r\n/**\r\n * .checklist li - Individual checklist items\r\n * \r\n * Sets up positioning and spacing for custom number display.\r\n */\r\n.checklist li {\r\n  position: relative;\r\n  /* Create positioning context for pseudo-elements */\r\n  counter-increment: item;\r\n  /* Increment the counter for each item */\r\n  margin: 0px;\r\n  /* Reset default margins */\r\n  padding-left: 25px;\r\n  /* Space for custom number display */\r\n\r\n  /* LAYOUT SYSTEM */\r\n  /* position: relative allows absolute positioning of pseudo-elements */\r\n  /* padding-left creates space for the custom number */\r\n}\r\n\r\n/**\r\n * .checklist li::before - Custom number display\r\n * \r\n * Creates the visible number for each checklist item.\r\n */\r\n.checklist li::before {\r\n  content: counter(item)\". \";\r\n  /* Display counter value with period */\r\n  position: absolute;\r\n  /* Position relative to parent li */\r\n  left: 0;\r\n  /* Align to left edge */\r\n  top: 0;\r\n  /* Align to top edge */\r\n  transform: translate(60%, -15%);\r\n  /* Fine-tune positioning */\r\n\r\n  /* CSS COUNTER DISPLAY */\r\n  /* counter(item) outputs the current counter value */\r\n  /* \". \" adds period and space after the number */\r\n}\r\n\r\n/**\r\n * .checklist li.checked::after - Checkmark display\r\n * \r\n * Shows a checkmark for completed items, positioned over the number.\r\n */\r\n.checklist li.checked::after {\r\n  content: \"✔️\";\r\n  /* Checkmark emoji */\r\n  position: absolute;\r\n  /* Position relative to parent li */\r\n  left: 0;\r\n  /* Align to left edge */\r\n  top: 0;\r\n  /* Align to top edge */\r\n\r\n  /* VISUAL STYLING */\r\n  color: #00ff00 !important;\r\n  /* Bright green color (!important for specificity) */\r\n  font-size: 1.2em;\r\n  /* Slightly larger than text */\r\n\r\n  /* POSITIONING */\r\n  transform: translate(5%, -40%);\r\n  /* Center over the number */\r\n\r\n  /* INTERACTION DESIGN */\r\n  /* Checkmark appears when .checked class is added via JavaScript */\r\n  /* Provides visual feedback for completed tasks */\r\n}\r\n\r\n/* ===== GAME LAYOUT STYLES ===== */\r\n\r\n/**\r\n * GAME CONTAINER\r\n * \r\n * Flexbox container for side-by-side game layout (board + info panel).\r\n */\r\n.game {\r\n  display: flex;\r\n  /* Enable flexbox layout */\r\n  flex-direction: row;\r\n  /* Arrange children horizontally */\r\n\r\n  /* LAYOUT PATTERN */\r\n  /* Common pattern for game layouts: board on left, controls on right */\r\n  /* Flexbox provides responsive behavior and easy alignment */\r\n}\r\n\r\n/**\r\n * ARCHITECTURAL NOTES\r\n * \r\n * This global stylesheet demonstrates several important CSS architecture principles:\r\n * \r\n * 1. MODULAR DESIGN\r\n *    - Imports variables from separate file\r\n *    - Separates concerns between global and component styles\r\n *    - Uses consistent naming conventions\r\n * \r\n * 2. DESIGN SYSTEM INTEGRATION\r\n *    - Leverages CSS custom properties throughout\r\n *    - Maintains consistent color and typography\r\n *    - Provides reusable utility classes\r\n * \r\n * 3. PROGRESSIVE ENHANCEMENT\r\n *    - Provides good defaults that work everywhere\r\n *    - Uses modern CSS features where supported\r\n *    - Maintains fallbacks for older browsers\r\n * \r\n * 4. ACCESSIBILITY CONSIDERATIONS\r\n *    - Maintains good color contrast ratios\r\n *    - Uses semantic HTML structure\r\n *    - Provides clear visual hierarchy\r\n * \r\n * 5. PERFORMANCE OPTIMIZATION\r\n *    - Minimal CSS for global scope\r\n *    - Efficient selectors\r\n *    - Leverages CSS inheritance\r\n * \r\n * FUTURE ENHANCEMENTS\r\n * \r\n * This stylesheet could be extended with:\r\n * - CSS Grid utilities for complex layouts\r\n * - More comprehensive typography scale\r\n * - Animation and transition utilities\r\n * - Responsive design helpers\r\n * - Print stylesheets\r\n * - Dark/light theme switching\r\n * - CSS logical properties for internationalization\r\n */","/**\r\n * BASIC TIC-TAC-TOE GAME STYLES\r\n * \r\n * This CSS file styles the basic tic-tac-toe game component.\r\n * It implements a classic, clean tic-tac-toe appearance with\r\n * white squares and clear visual hierarchy.\r\n * \r\n * Design philosophy:\r\n * - Classic tic-tac-toe appearance (white squares, simple borders)\r\n * - Clean, readable typography\r\n * - Clear visual feedback for winning combinations\r\n * - Responsive layout with proper spacing\r\n * - Accessible design with good contrast\r\n * \r\n * CSS concepts demonstrated:\r\n * - CSS Box Model (padding, margin, border)\r\n * - Float-based layout (legacy approach, still functional)\r\n * - CSS pseudo-elements (::after for clearfix)\r\n * - CSS selectors and specificity\r\n * - Color contrast for accessibility\r\n * - Typography and text alignment\r\n */\r\n\r\n/* ===== GAME SQUARE STYLING ===== */\r\n/**\r\n * .square - Individual squares on the tic-tac-toe board\r\n * \r\n * These represent the 9 clickable areas where players place X's and O's.\r\n * Uses a classic white appearance that's familiar and accessible.\r\n */\r\n.square {\r\n    /* COLOR SCHEME */\r\n    background: #fff;\r\n    /* Pure white background for classic look */\r\n    border: 1px solid #999;\r\n    /* Light gray border for definition */\r\n    color: #000;\r\n    /* Black text for maximum contrast */\r\n\r\n    /* LAYOUT */\r\n    float: left;\r\n    /* Legacy float layout - creates horizontal alignment */\r\n    /* Modern alternative would be CSS Grid or Flexbox */\r\n\r\n    /* TYPOGRAPHY */\r\n    font-size: 24px;\r\n    /* Large enough for clear X/O visibility */\r\n    font-weight: bold;\r\n    /* Bold text for better visual impact */\r\n    line-height: 34px;\r\n    /* Matches height for vertical centering */\r\n    text-align: center;\r\n    /* Horizontal centering of X/O characters */\r\n\r\n    /* DIMENSIONS */\r\n    height: 34px;\r\n    /* Fixed height for consistent appearance */\r\n    width: 34px;\r\n    /* Fixed width creates perfect squares */\r\n\r\n    /* SPACING */\r\n    margin-right: -1px;\r\n    /* Overlap borders to avoid double thickness */\r\n    margin-top: -1px;\r\n    /* Overlap borders vertically */\r\n    padding: 0;\r\n    /* No internal padding - keep squares compact */\r\n\r\n    /* INTERACTION */\r\n    cursor: pointer;\r\n    /* Indicate clickable area to users */\r\n\r\n    /* ACCESSIBILITY */\r\n    /* High contrast (white background, black text) ensures readability */\r\n    /* Clear borders help users distinguish individual squares */\r\n}\r\n\r\n/* ===== WINNING SQUARE HIGHLIGHTING ===== */\r\n/**\r\n * .winning-square - Special styling for squares that form the winning line\r\n * \r\n * Provides immediate visual feedback when someone wins the game.\r\n * Uses bright yellow highlighting that's impossible to miss.\r\n */\r\n.winning-square {\r\n    background-color: yellow;\r\n    /* Bright highlight color for celebration */\r\n    color: var(--primary-bg);\r\n    /* Dark text for contrast against yellow */\r\n    font-weight: bold;\r\n    /* Extra emphasis for winning pieces */\r\n\r\n    /* DESIGN NOTES */\r\n    /* Yellow is universally recognized as a highlight color */\r\n    /* Dark text ensures readability against bright background */\r\n    /* Bold font weight adds to the celebratory feel */\r\n}\r\n\r\n/* ===== BOARD ROW CLEARFIX ===== */\r\n/**\r\n * .board-row::after - Clearfix for float-based layout\r\n * \r\n * This is a classic CSS technique to contain floated elements.\r\n * Prevents layout collapse when all children are floated.\r\n * Essential for proper board row structure.\r\n */\r\n.board-row:after {\r\n    clear: both;\r\n    /* Clear all floated elements */\r\n    content: '';\r\n    /* Required for pseudo-element to appear */\r\n    display: table;\r\n    /* Creates block-level clearing context */\r\n\r\n    /* EXPLANATION OF CLEARFIX */\r\n    /* When elements are floated, their parent container collapses */\r\n    /* This pseudo-element forces the parent to expand around floated children */\r\n    /* Modern alternative: Use CSS Grid or Flexbox instead of floats */\r\n}\r\n\r\n/* ===== GAME STATUS DISPLAY ===== */\r\n/**\r\n * .status - Game status text (whose turn, winner, draw)\r\n * \r\n * Displays important game information above the board.\r\n * Provides clear communication about game state.\r\n */\r\n.status {\r\n    margin-bottom: 10px;\r\n    /* Space between status and game board */\r\n\r\n    /* LAYOUT NOTES */\r\n    /* Simple margin creates clean separation from board */\r\n    /* Inherits text styling from parent elements */\r\n    /* Could be enhanced with custom typography in future */\r\n}\r\n\r\n/* ===== GAME INFORMATION SIDEBAR ===== */\r\n/**\r\n * .game-info - Container for move history and controls\r\n * \r\n * Houses the move history list and game controls.\r\n * Positioned to the right of the game board.\r\n */\r\n.game-info {\r\n    margin-left: 20px;\r\n    /* Space between board and info panel */\r\n\r\n    /* LAYOUT NOTES */\r\n    /* Creates clear visual separation between game board and controls */\r\n    /* Left margin works with the overall game layout structure */\r\n    /* Contains move history buttons and toggle controls */\r\n}\r\n\r\n/**\r\n * LAYOUT STRUCTURE EXPLANATION\r\n * \r\n * The overall layout uses a simple float-based system:\r\n * 1. Game board uses floated squares in rows\r\n * 2. Each row is cleared with the clearfix technique\r\n * 3. Game info panel sits alongside with left margin\r\n * \r\n * MODERN CSS ALTERNATIVES\r\n * \r\n * This could be updated to use:\r\n * - CSS Grid for the 3x3 board layout\r\n * - Flexbox for overall game layout\r\n * - CSS Custom Properties for consistent theming\r\n * \r\n * ACCESSIBILITY CONSIDERATIONS\r\n * \r\n * Current design provides:\r\n * - High contrast colors (white/black)\r\n * - Clear visual hierarchy\r\n * - Adequate touch targets (34px squares)\r\n * - Semantic HTML structure\r\n * \r\n * POTENTIAL IMPROVEMENTS\r\n * \r\n * Could be enhanced with:\r\n * - Focus styles for keyboard navigation\r\n * - Larger touch targets for mobile\r\n * - Responsive design for different screen sizes\r\n * - CSS animations for moves and wins\r\n * - Dark mode support\r\n */","/**\r\n * ADVANCED TIC-TAC-TOE GAME STYLES\r\n * \r\n * This CSS file styles the advanced tic-tac-toe game with enhanced features.\r\n * It uses a modern dark theme with CSS custom properties for consistency.\r\n * \r\n * Advanced features styled:\r\n * - Dark theme design with custom color scheme\r\n * - Hover effects for better user interaction\r\n * - Winning line animation overlay with SVG\r\n * - Move history sidebar with enhanced typography\r\n * - Responsive button styling\r\n * - Visual indicators for game state\r\n * \r\n * Key differences from basic version:\r\n * - Uses CSS custom properties (variables) for theming\r\n * - Modern dark color scheme instead of classic white\r\n * - CSS Grid for board layout instead of floats\r\n * - Advanced hover effects and transitions\r\n * - SVG overlay system for winning line animations\r\n * - Enhanced typography and spacing\r\n * \r\n * CSS concepts demonstrated:\r\n * - CSS Custom Properties (CSS Variables)\r\n * - CSS Grid layout system\r\n * - CSS positioning (relative/absolute)\r\n * - CSS pseudo-classes (:hover, :empty)\r\n * - SVG styling and positioning\r\n * - Modern CSS layout techniques\r\n * - Responsive design principles\r\n */\r\n\r\n/* ===== GAME BOARD LAYOUT ===== */\r\n/**\r\n * .board - The main 3x3 tic-tac-toe grid container\r\n * \r\n * Uses CSS Grid for modern, precise layout control.\r\n * Creates a perfect 3x3 grid with equal-sized cells.\r\n */\r\n.board {\r\n    display: grid;\r\n    /* Enable CSS Grid layout */\r\n    grid-template-columns: repeat(3, 1fr);\r\n    /* Create 3 equal columns (1 fraction each) */\r\n    gap: 0px;\r\n    /* No gap between squares for seamless borders */\r\n\r\n    /* CSS GRID EXPLANATION */\r\n    /* repeat(3, 1fr) is shorthand for: 1fr 1fr 1fr */\r\n    /* 'fr' unit represents a fraction of available space */\r\n    /* This creates 3 columns of exactly equal width */\r\n}\r\n\r\n/* ===== GAME SQUARES ===== */\r\n/**\r\n * .mysquare - Individual squares in the advanced tic-tac-toe board\r\n * \r\n * Modern dark-themed squares with hover effects and smooth interactions.\r\n * Uses CSS custom properties for consistent theming.\r\n */\r\n.mysquare {\r\n    /* COLOR SCHEME - Using CSS Custom Properties */\r\n    background: var(--secondary-bg);\r\n    /* Dark background from CSS variables */\r\n    border: 1px solid var(--accent-color);\r\n    /* Bright border for definition */\r\n    color: var(--accent-color);\r\n    /* Bright text color */\r\n\r\n    /* LAYOUT */\r\n    float: left;\r\n    /* Legacy positioning (could be removed with grid) */\r\n\r\n    /* TYPOGRAPHY */\r\n    font-size: 35px;\r\n    /* Larger than basic version for modern look */\r\n    font-family: var(--font-family);\r\n    /* Custom font stack from CSS variables */\r\n    line-height: 34px;\r\n    /* Vertical alignment reference */\r\n    text-align: center;\r\n    /* Center X/O horizontally */\r\n\r\n    /* DIMENSIONS */\r\n    height: 50px;\r\n    /* Larger than basic version (34px) */\r\n    width: 50px;\r\n    /* Square proportions maintained */\r\n\r\n    /* SPACING */\r\n    margin-right: -1px;\r\n    /* Border overlap technique */\r\n    margin-top: -1px;\r\n    /* Prevents double borders */\r\n    padding: 0;\r\n    /* Clean internal spacing */\r\n\r\n    /* INTERACTION */\r\n    cursor: pointer;\r\n    /* Indicate clickable area */\r\n    transition: all 0.2s ease;\r\n    /* Smooth transitions for hover effects */\r\n}\r\n\r\n/* ===== SQUARE HOVER EFFECTS ===== */\r\n/**\r\n * .mysquare.empty:hover - Hover effect for empty squares\r\n * \r\n * Provides immediate visual feedback when user hovers over available moves.\r\n * Only applies to empty squares to avoid confusion.\r\n */\r\n.mysquare.empty:hover {\r\n    border: 2px solid var(--accent-color);\r\n    /* Thicker border on hover */\r\n    background-color: var(--hover-bg);\r\n    /* Subtle background change */\r\n\r\n    /* USER EXPERIENCE NOTES */\r\n    /* Thicker border draws attention to hovered square */\r\n    /* Background change provides additional visual feedback */\r\n    /* Only applies to empty squares (.empty class) */\r\n}\r\n\r\n/* ===== WINNING SQUARE STYLING ===== */\r\n/**\r\n * .my-winning-square - Highlighting for squares in the winning line\r\n * \r\n * Subtle highlighting that works with the SVG overlay animation.\r\n */\r\n.my-winning-square {\r\n    font-weight: bold;\r\n    /* Emphasize winning pieces */\r\n\r\n    /* DESIGN DECISION */\r\n    /* Uses subtle font-weight change instead of background color */\r\n    /* This allows the SVG overlay to be the primary visual indicator */\r\n    /* Creates layered visual feedback (font + SVG animation) */\r\n}\r\n\r\n/* ===== BOARD CONTAINER SYSTEM ===== */\r\n/**\r\n * .board-container - Wrapper for board and SVG overlay\r\n * \r\n * Creates a positioning context for the animated winning line overlay.\r\n * Essential for proper SVG positioning and animation.\r\n */\r\n.board-container {\r\n    display: flex;\r\n    /* Flexbox for centering */\r\n    justify-content: center;\r\n    /* Center board horizontally */\r\n    align-items: center;\r\n    /* Center board vertically */\r\n    position: relative;\r\n    /* Create positioning context for SVG */\r\n\r\n    /* DIMENSIONS */\r\n    width: 300px;\r\n    /* Fixed width for consistent layout */\r\n    height: 200px;\r\n    /* Fixed height with room for overlay */\r\n\r\n    /* OVERFLOW */\r\n    overflow: visible;\r\n    /* Allow SVG to extend beyond container */\r\n\r\n    /* SPACING */\r\n    margin-right: -30px;\r\n    /* Adjust positioning in overall layout */\r\n\r\n    /* POSITIONING CONTEXT */\r\n    /* position: relative allows absolutely positioned children (SVG) */\r\n    /* to position relative to this container, not the entire page */\r\n}\r\n\r\n/* ===== GAME STATUS DISPLAY ===== */\r\n/**\r\n * .my-status - Game status text container\r\n * \r\n * Displays current game state with proper spacing and alignment.\r\n */\r\n.my-status {\r\n    margin-bottom: -25px;\r\n    /* Tight spacing with board */\r\n    text-align: center;\r\n    /* Center the status text */\r\n    margin-right: -30px;\r\n    /* Alignment with board container */\r\n}\r\n\r\n/* ===== GAME INFORMATION SIDEBAR ===== */\r\n/**\r\n * .my-game-info - Container for move history and controls\r\n * \r\n * Fixed-size sidebar that houses game controls and move history.\r\n */\r\n.my-game-info {\r\n    width: 350px;\r\n    /* Fixed width for consistent layout */\r\n    min-height: 300px;\r\n    /* Minimum height prevents jumping */\r\n\r\n    /* LAYOUT STABILITY */\r\n    /* Fixed dimensions prevent layout shifts during gameplay */\r\n    /* min-height ensures space is reserved even with short move lists */\r\n}\r\n\r\n/* ===== MOVE INFORMATION DISPLAY ===== */\r\n/**\r\n * .move-info - Additional move information text\r\n * \r\n * Shows contextual information about move history navigation.\r\n */\r\n.move-info {\r\n    margin-top: -10px;\r\n    /* Tight spacing with history list */\r\n\r\n    /* TYPOGRAPHY NOTES */\r\n    /* Inherits styling from parent elements */\r\n    /* Could be enhanced with custom styling for emphasis */\r\n}\r\n\r\n/* ===== SVG WINNING OVERLAY ===== */\r\n/**\r\n * .winning-overlay - SVG container for animated winning line\r\n * \r\n * Positions the SVG animation overlay for winning line display.\r\n * Critical for the animated winning line feature.\r\n */\r\n.winning-overlay {\r\n    position: absolute;\r\n    /* Position relative to .board-container */\r\n    top: 0;\r\n    /* Align with container top */\r\n    left: 0;\r\n    /* Align with container left */\r\n\r\n    /* DIMENSIONS */\r\n    width: 100%;\r\n    /* Fill container width */\r\n    height: 100%;\r\n    /* Fill container height */\r\n\r\n    /* OVERFLOW */\r\n    overflow: visible;\r\n    /* Allow animation to extend beyond bounds */\r\n\r\n    /* INTERACTION */\r\n    pointer-events: none;\r\n    /* Don't interfere with game clicks */\r\n\r\n    /* LAYERING */\r\n    /* Appears above game board due to absolute positioning */\r\n    /* pointer-events: none ensures clicks pass through to squares */\r\n}\r\n\r\n/* ===== BUTTON STYLING ===== */\r\n/**\r\n * Button styles for the advanced tic-tac-toe game\r\n * Uses consistent theming with the rest of the application\r\n */\r\n\r\n/**\r\n * .mybutton - Standard game buttons\r\n * \r\n * Used for move history navigation and general game controls.\r\n */\r\n.mybutton {\r\n    /* COLOR SCHEME */\r\n    background-color: var(--secondary-bg);\r\n    /* Dark background */\r\n    color: var(--accent-color);\r\n    /* Bright text */\r\n    border: 1px solid var(--accent-color);\r\n    /* Matching border */\r\n\r\n    /* TYPOGRAPHY */\r\n    font-size: 16px;\r\n    /* Readable text size */\r\n\r\n    /* SPACING */\r\n    margin: 0;\r\n    /* Clean spacing - controlled by parent */\r\n\r\n    /* INTERACTION */\r\n    cursor: pointer;\r\n    /* Indicate clickable */\r\n    transition: all 0.2s ease;\r\n    /* Smooth hover transitions */\r\n}\r\n\r\n/**\r\n * .mybutton:hover - Button hover effects\r\n * \r\n * Provides consistent interaction feedback across all buttons.\r\n */\r\n.mybutton:hover {\r\n    border: 1px solid var(--accent-color);\r\n    /* Maintain border color */\r\n    background-color: var(--hover-bg);\r\n    /* Subtle background change */\r\n    color: var(--accent-color);\r\n    /* Maintain text color */\r\n\r\n    /* CONSISTENCY */\r\n    /* Matches hover effects used throughout the application */\r\n    /* Provides immediate feedback without being distracting */\r\n}\r\n\r\n/**\r\n * .desc-button - Special button for toggle controls\r\n * \r\n * Used specifically for the move order toggle button.\r\n */\r\n.desc-button {\r\n    /* INHERIT BASE BUTTON STYLES */\r\n    background-color: var(--secondary-bg);\r\n    color: var(--accent-color);\r\n    border: 1px solid var(--accent-color);\r\n    font-size: 16px;\r\n    margin: 0;\r\n\r\n    /* CUSTOM POSITIONING */\r\n    border-radius: 0px;\r\n    /* Sharp corners for this style */\r\n    margin-left: 145px;\r\n    /* Specific positioning in layout */\r\n\r\n    /* INTERACTION */\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n}\r\n\r\n/**\r\n * .desc-button:hover - Toggle button hover effects\r\n * \r\n * Consistent with other button hover effects.\r\n */\r\n.desc-button:hover {\r\n    border: 1px solid var(--accent-color);\r\n    background-color: var(--hover-bg);\r\n    color: var(--accent-color);\r\n}\r\n\r\n/**\r\n * DESIGN SYSTEM NOTES\r\n * \r\n * This CSS demonstrates a cohesive design system with:\r\n * - Consistent color scheme via CSS custom properties\r\n * - Unified interaction patterns (hover effects)\r\n * - Modular component styling\r\n * - Modern CSS techniques (Grid, Flexbox, custom properties)\r\n * \r\n * RESPONSIVE DESIGN CONSIDERATIONS\r\n * \r\n * Current design is optimized for desktop but could be enhanced with:\r\n * - Media queries for mobile devices\r\n * - Flexible units (rem, em, vw, vh) instead of fixed pixels\r\n * - Touch-friendly button sizes\r\n * - Scalable typography\r\n * \r\n * ACCESSIBILITY FEATURES\r\n * \r\n * Includes:\r\n * - High contrast color scheme\r\n * - Clear focus indicators (via CSS variables)\r\n * - Adequate touch targets\r\n * - Semantic color usage\r\n * \r\n * PERFORMANCE CONSIDERATIONS\r\n * \r\n * Optimized with:\r\n * - CSS transitions for smooth animations\r\n * - Efficient selectors\r\n * - Minimal repaints/reflows\r\n * - Hardware-accelerated animations (when using transforms)\r\n */","/**\r\n * CONNECT FOUR GAME STYLES\r\n * \r\n * This CSS file contains all styling for the Connect Four game component.\r\n * It uses CSS custom properties (variables) for consistent theming and\r\n * implements a classic Connect Four visual design with modern touches.\r\n * \r\n * Key CSS concepts demonstrated:\r\n * - CSS Custom Properties (variables) for maintainable theming\r\n * - Flexbox layout for responsive game board\r\n * - CSS Grid concepts (though using flexbox implementation)\r\n * - Hover effects for user interaction feedback\r\n * - CSS selectors and class combinations\r\n * - Border-radius for circular game pieces\r\n * - Positioning for button placement\r\n */\r\n\r\n/* ===== MAIN GAME BOARD CONTAINER ===== */\r\n/**\r\n * .c4board - The main Connect Four game board container\r\n * \r\n * This creates the classic Connect Four blue board appearance\r\n * with holes for game pieces to be dropped into.\r\n */\r\n.c4board {\r\n    /* LAYOUT STRUCTURE */\r\n    display: flex;\r\n    /* Use flexbox for layout */\r\n    flex-direction: column;\r\n    /* Stack rows vertically */\r\n\r\n    /* LEGACY GRID REFERENCE */\r\n    grid-template-rows: repeat(6, 50px);\r\n    /* Not used (flexbox instead), but shows grid thinking */\r\n\r\n    /* SPACING AND LAYOUT */\r\n    gap: 5px;\r\n    /* Space between each row of holes */\r\n\r\n    /* VISUAL STYLING */\r\n    background-color: var(--accent-color);\r\n    /* Blue board color (from CSS variables) */\r\n    padding: 5px 5px 10px 5px;\r\n    /* Inner spacing: top, right, bottom, left */\r\n    /* Extra bottom padding to balance visual weight */\r\n    border-radius: 10px;\r\n    /* Rounded corners for modern look */\r\n\r\n    /* SIZING */\r\n    width: fit-content;\r\n    /* Board only as wide as its content */\r\n\r\n    /* POSITIONING */\r\n    position: relative;\r\n    /* Allows absolute positioning of child elements */\r\n    /* Important for potential future enhancements */\r\n}\r\n\r\n/* ===== BOARD ROW CONTAINER ===== */\r\n/**\r\n * .row - Individual row within the game board\r\n * \r\n * Each row contains 7 cells (columns) arranged horizontally\r\n */\r\n.row {\r\n    display: flex;\r\n    /* Arrange cells horizontally using flexbox */\r\n    /* flex-direction defaults to 'row', so cells go left-to-right */\r\n}\r\n\r\n/* ===== INDIVIDUAL GAME CELLS ===== */\r\n/**\r\n * .cell - Individual cell where game pieces can be placed\r\n * \r\n * These represent the holes in a Connect Four board.\r\n * They start as dark circles and change based on game state.\r\n */\r\n.cell {\r\n    /* DIMENSIONS */\r\n    width: 50px;\r\n    /* Fixed width for consistent board appearance */\r\n    height: 50px;\r\n    /* Fixed height (square cells) */\r\n\r\n    /* VISUAL STYLING */\r\n    background-color: var(--secondary-bg);\r\n    /* Dark hole color (from CSS variables) */\r\n    border-radius: 50%;\r\n    /* Makes the square into a perfect circle */\r\n\r\n    /* LAYOUT */\r\n    display: flex;\r\n    /* Use flexbox for centering piece inside */\r\n    justify-content: center;\r\n    /* Center piece horizontally */\r\n    align-items: center;\r\n    /* Center piece vertically */\r\n\r\n    /* SPACING */\r\n    margin: 3px;\r\n    /* Space around each cell for visual separation */\r\n\r\n    /* INTERACTION */\r\n    cursor: pointer;\r\n    /* Show pointer cursor to indicate clickable */\r\n}\r\n\r\n/* ===== CELL STATE MODIFIERS ===== */\r\n/**\r\n * Game piece colors - These override the default cell background\r\n * when a piece is placed in the cell\r\n */\r\n.cell.red {\r\n    background-color: red;\r\n    /* Red player's pieces */\r\n}\r\n\r\n.cell.yellow {\r\n    background-color: yellow;\r\n    /* Yellow player's pieces */\r\n}\r\n\r\n/**\r\n * Hover state styling - Shows preview when user hovers over a column\r\n * Provides immediate visual feedback for better user experience\r\n */\r\n.cell.hovered {\r\n    background-color: var(--hover-bg);\r\n    /* Darker shade to show hover (from CSS variables) */\r\n    /* This gives players a preview of where their piece would land */\r\n}\r\n\r\n/* ===== GAME STATUS DISPLAY ===== */\r\n/**\r\n * .c4-status - Container for current game status text\r\n * \r\n * Shows whose turn it is or who won the game\r\n */\r\n.c4-status {\r\n    display: flex;\r\n    /* Use flexbox for layout control */\r\n    margin-bottom: 0px;\r\n    /* No space below status (tight layout) */\r\n    justify-content: center;\r\n    /* Center the status text horizontally */\r\n    /* This creates a clean, centered status display above the board */\r\n}\r\n\r\n/* ===== RESTART BUTTON STYLING ===== */\r\n/**\r\n * .c4-button - The restart game button\r\n * \r\n * Styled to match the overall game theme and provide clear interaction\r\n */\r\n.c4-button {\r\n    /* COLOR SCHEME */\r\n    background-color: var(--secondary-bg);\r\n    /* Dark background (from CSS variables) */\r\n    color: var(--accent-color);\r\n    /* Light text color for contrast */\r\n    border: 1px solid var(--accent-color);\r\n    /* Matching border color */\r\n\r\n    /* TYPOGRAPHY */\r\n    font-size: 16px;\r\n    /* Readable text size */\r\n\r\n    /* SPACING */\r\n    margin: 0px 0px;\r\n    /* No top/bottom margin */\r\n    margin-left: 290px;\r\n    /* Position button to the right */\r\n    margin-top: 22px;\r\n    /* Space above button */\r\n\r\n    /* STYLING */\r\n    border-radius: 0px;\r\n    /* Sharp corners (design choice) */\r\n\r\n    /* INTERACTION */\r\n    cursor: pointer;\r\n    /* Show pointer cursor on hover */\r\n}\r\n\r\n/**\r\n * Button hover effect - Provides visual feedback on interaction\r\n * Changes background when user hovers over the restart button\r\n */\r\n.c4-button:hover {\r\n    border: 1px solid var(--accent-color);\r\n    /* Keep same border color */\r\n    background-color: var(--hover-bg);\r\n    /* Darker background on hover */\r\n    color: var(--accent-color);\r\n    /* Keep same text color */\r\n    /* This creates a subtle but noticeable hover effect */\r\n}\r\n\r\n/* ===== PLAYER INDICATOR PIECES ===== */\r\n/**\r\n * .piece - Small circular indicators used in status display\r\n * \r\n * These show which color/player is currently active or has won\r\n * Separate from the main game pieces for status display only\r\n */\r\n.piece {\r\n    display: inline-block;\r\n    /* Allows width/height while staying inline */\r\n\r\n    /* DIMENSIONS */\r\n    width: 20px;\r\n    /* Smaller than game pieces */\r\n    height: 20px;\r\n    /* Square dimensions */\r\n\r\n    /* STYLING */\r\n    border-radius: 50%;\r\n    /* Make it circular */\r\n\r\n    /* POSITIONING */\r\n    margin-left: 5px;\r\n    /* Small space from text */\r\n    margin-top: 3px;\r\n    /* Slight vertical adjustment for alignment */\r\n}\r\n\r\n/* ===== PIECE COLOR CLASSES ===== */\r\n/**\r\n * Color classes for the status indicator pieces\r\n * These match the main game piece colors\r\n */\r\n.red {\r\n    background-color: red;\r\n    /* Red player indicator */\r\n}\r\n\r\n.yellow {\r\n    background-color: yellow;\r\n    /* Yellow player indicator */\r\n}\r\n\r\n/* ===== PLAYER INDICATOR LAYOUT ===== */\r\n/**\r\n * .player-indicator - Container for status text and piece indicator\r\n * \r\n * Ensures proper alignment between text and colored piece\r\n */\r\n.player-indicator {\r\n    display: flex;\r\n    /* Use flexbox for alignment */\r\n    align-items: center;\r\n    /* Vertically center text and piece */\r\n    gap: 5px;\r\n    /* Consistent space between text and piece */\r\n    /* This creates a clean, aligned status display */\r\n}\r\n\r\n/**\r\n * RESPONSIVE DESIGN CONSIDERATIONS\r\n * \r\n * This CSS is designed for desktop use but could be enhanced with:\r\n * - Media queries for mobile devices\r\n * - Flexible sizing using viewport units\r\n * - Touch-friendly button sizes\r\n * \r\n * ACCESSIBILITY IMPROVEMENTS POSSIBLE\r\n * \r\n * Future enhancements could include:\r\n * - Focus states for keyboard navigation\r\n * - ARIA labels for screen readers\r\n * - High contrast mode support\r\n * - Reduced motion preferences\r\n */"],"names":[],"sourceRoot":""}