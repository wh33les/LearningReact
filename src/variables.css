/**
 * CSS CUSTOM PROPERTIES (VARIABLES) DEFINITION
 * 
 * This file defines the global design system for the React Games application.
 * CSS Custom Properties provide a centralized way to manage colors, fonts,
 * and other design tokens across the entire application.
 * 
 * Benefits of this approach:
 * - Centralized theme management
 * - Easy color scheme changes
 * - Consistent design across components
 * - Simplified maintenance and updates
 * - Foundation for future theme switching
 * - Improved developer experience
 * 
 * CSS concepts demonstrated:
 * - CSS Custom Properties (Variables)
 * - Design system architecture
 * - Color theory application
 * - Typography system design
 * - Maintainable CSS organization
 * 
 * Browser support:
 * - Modern browsers (IE11+ with some limitations)
 * - Full support in all evergreen browsers
 * - Fallback strategies can be implemented if needed
 */

/**
 * ROOT VARIABLE SCOPE
 * 
 * The :root pseudo-class represents the document root element.
 * Variables defined here are available globally throughout the CSS.
 * This is the highest specificity level for CSS custom properties.
 */
:root {
    /* ===== COLOR SYSTEM ===== */

    /**
     * PRIMARY BACKGROUND COLOR
     * 
     * The main background color used throughout the application.
     * A very dark gray that provides excellent contrast for light text.
     * 
     * Color breakdown:
     * - Hex: #19181a
     * - RGB: rgb(25, 24, 26)
     * - HSL: hsl(270°, 4%, 20%)
     * 
     * Design rationale:
     * - Dark enough for comfortable viewing in low light
     * - Not pure black to maintain visual hierarchy
     * - Slight purple tint adds warmth
     */
    --primary-bg: #19181a;

    /**
     * SECONDARY BACKGROUND COLOR
     * 
     * Used for component backgrounds, cards, and elevated surfaces.
     * Lighter than primary background to create visual hierarchy.
     * 
     * Color breakdown:
     * - RGB: rgb(35, 39, 47)
     * - Provides sufficient contrast against primary background
     * - Creates subtle layering in the interface
     * 
     * Usage examples:
     * - Game board backgrounds
     * - Button backgrounds
     * - Card components
     * - Modal overlays
     */
    --secondary-bg: rgb(35, 39, 47);

    /**
     * ACCENT COLOR
     * 
     * The primary accent color used for text, borders, and interactive elements.
     * A bright cyan-blue that provides excellent contrast against dark backgrounds.
     * 
     * Color breakdown:
     * - RGB: rgb(88, 196, 220)
     * - Hex equivalent: #58c4dc
     * - HSL: hsl(190°, 66%, 60%)
     * 
     * Design rationale:
     * - High contrast against dark backgrounds (WCAG AA compliant)
     * - Blue conveys trust and professionalism
     * - Bright enough to draw attention to interactive elements
     * - Distinctive enough to establish brand identity
     * 
     * Accessibility notes:
     * - Contrast ratio vs --primary-bg: ~12:1 (exceeds WCAG AAA)
     * - Contrast ratio vs --secondary-bg: ~8:1 (exceeds WCAG AAA)
     */
    --accent-color: rgb(88, 196, 220);

    /**
     * HOVER BACKGROUND COLOR
     * 
     * Used for hover states on interactive elements.
     * Provides subtle feedback without being distracting.
     * 
     * Color breakdown:
     * - Same as --primary-bg: #19181a
     * - Creates consistent hover behavior
     * - Darker than --secondary-bg for clear state change
     * 
     * Usage pattern:
     * - Button hover states
     * - Interactive cell highlights
     * - Menu item hovers
     */
    --hover-bg: #19181a;

    /* ===== TYPOGRAPHY SYSTEM ===== */

    /**
     * PRIMARY FONT FAMILY
     * 
     * Defines the font stack used throughout the application.
     * Prioritizes modern, readable fonts with comprehensive fallbacks.
     * 
     * Font stack breakdown:
     * 1. "Optimistic Display" - Custom font (if loaded)
     * 2. "-apple-system" - macOS system font
     * 3. "ui-sans-serif" - Generic system UI font
     * 4. "system-ui" - Cross-platform system font
     * 5. "sans-serif" - Generic sans-serif fallback
     * 6. Emoji fonts for proper emoji rendering
     * 
     * Design rationale:
     * - System fonts provide optimal performance (no web font loading)
     * - Native appearance on each platform
     * - Excellent readability across devices
     * - Comprehensive emoji support
     * - Fallback chain ensures fonts always load
     * 
     * Performance benefits:
     * - No additional HTTP requests
     * - Instant font rendering (no FOIT/FOUT)
     * - Reduced bandwidth usage
     * - Better Core Web Vitals scores
     */
    --font-family: Optimistic Display, -apple-system, ui-sans-serif, system-ui, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;

    /* ===== FUTURE DESIGN TOKENS ===== */

    /**
     * PLANNED EXPANSIONS
     * 
     * This design system could be extended with additional tokens:
     * 
     * Spacing system:
     * --spacing-xs: 4px;
     * --spacing-sm: 8px;
     * --spacing-md: 16px;
     * --spacing-lg: 24px;
     * --spacing-xl: 32px;
     * 
     * Typography scale:
     * --font-size-xs: 12px;
     * --font-size-sm: 14px;
     * --font-size-md: 16px;
     * --font-size-lg: 18px;
     * --font-size-xl: 24px;
     * --font-size-xxl: 32px;
     * 
     * Border radius system:
     * --radius-sm: 4px;
     * --radius-md: 8px;
     * --radius-lg: 12px;
     * --radius-full: 50%;
     * 
     * Shadow system:
     * --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.1);
     * --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
     * --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
     * 
     * Animation system:
     * --transition-fast: 150ms ease;
     * --transition-base: 300ms ease;
     * --transition-slow: 500ms ease;
     * 
     * Z-index system:
     * --z-dropdown: 1000;
     * --z-modal: 1050;
     * --z-toast: 1100;
     * --z-tooltip: 1200;
     */
}

/**
 * USAGE EXAMPLES
 * 
 * How to use these variables in your CSS:
 * 
 * ```css
 * .my-component {
 *     background-color: var(--secondary-bg);
 *     color: var(--accent-color);
 *     font-family: var(--font-family);
 * }
 * 
 * .my-button:hover {
 *     background-color: var(--hover-bg);
 * }
 * ```
 * 
 * FALLBACK PATTERNS
 * 
 * For older browser support, you can provide fallbacks:
 * 
 * ```css
 * .my-component {
 *     background-color: #232730;                    /* Fallback */
* background-color: var(--secondary-bg);
/* Modern browsers */
*
}

* ``` * * JAVASCRIPT INTEGRATION * * These variables can also be accessed and modified via JavaScript: * * ```javascript * // Read a CSS variable
* const accentColor=getComputedStyle(document.documentElement) * .getPropertyValue('--accent-color');
* * // Update a CSS variable
* document.documentElement.style.setProperty('--accent-color', '#ff6b6b');

* ``` * * THEME SWITCHING POTENTIAL * * This system provides the foundation for theme switching: * * ```css * [data-theme="light"] {
    * --primary-bg: #ffffff;
    * --secondary-bg: #f8f9fa;
    * --accent-color: #0066cc;
    * --hover-bg: #e9ecef;
    *
}

* * [data-theme="dark"] {
    * --primary-bg: #19181a;
    * --secondary-bg: rgb(35, 39, 47);
    * --accent-color: rgb(88, 196, 220);
    * --hover-bg: #19181a;
    *
}

* ``` * * MAINTENANCE BEST PRACTICES * * 1. Document all color choices with rationale * 2. Test contrast ratios for accessibility * 3. Use semantic naming (--primary-bg vs --color-blue) * 4. Group related variables together * 5. Consider the cascade and inheritance * 6. Test across different browsers and devices * 7. Version control design token changes carefully * 8. Consider impact on existing components when updating */